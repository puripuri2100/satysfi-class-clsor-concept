@require: annot
@require: math
@require: list
@require: pervasives

@import: clsor-font



module Clsor :> sig

  type config :: o
  val default : unit -> config
  val set-font-size-normal : length -> config -> config
  val set-link-format : (inline-text -> inline-text) -> config -> config
  val set-section-title-format : (context -> ClsorFont.t -> list int -> inline-text -> inline-boxes) -> config -> config


  signature DocumentConfig = sig
    val config : config
  end

  module Make : (
    DocumentConfig : sig
      val config : config
    end 
  ) -> sig
    val document : block-text -> document
    val +p : block [inline-text]
    val +section : block [inline-text, block-text]
    val \href : inline [string, inline-text]
    val \url : inline [string]
  end

end
= struct



  val set-cjk-font font-name ctx =
    ctx |> set-font HanIdeographic font-name
        |> set-font Kana font-name

  val set-latin-font font-name ctx =
    ctx |> set-font Latin font-name



  type config =
    (|
      font-size-normal : length,
      link-format : inline-text -> inline-text,
      section-title-format : context -> ClsorFont.t -> list int -> inline-text -> inline-boxes,
    |)

  val default () =
    let font-size-normal = 12pt in
    (|
      font-size-normal = font-size-normal,
      link-format = fun it -> it,
      section-title-format = fun ctx font-data num-lst title -> (
        let font-size =
          match num-lst with
            | [] -> abort-with-message `err`
            | [_] -> font-size-normal *' 1.7
            | _::_::[] -> font-size-normal *' 1.4
            | _ -> font-size-normal *' 1.1
          end
        in
        let ctx = ctx |> set-font-size font-size
                      |> set-cjk-font (ClsorFont.get-cjk-gothic font-data)
                      |> set-latin-font (ClsorFont.get-latin-sans font-data)
        in
        let join lst =
          List.fold-lefti (fun i s n ->
            if i <= 0 then
              arabic n
            else
              s ^ `. `# ^ arabic n
          ) ` ` lst
        in
        let num-str = join num-lst in
        let num-ib = read-inline ctx (embed-string num-str) in
        let title-ib = read-inline ctx title in
        num-ib ++ inline-skip font-size ++ title-ib
      )
    |)

  val set-font-size-normal size (config:config) =
    (|
      config
      with
      font-size-normal = size
    |)

  val set-link-format f (config:config) =
    (|
      config
      with
      link-format = f
    |)

  val set-section-title-format f (config:config) =
    (|
      config
      with
      section-title-format = f
    |)



  signature DocumentConfig = sig
    val config : config
  end


  module Make = fun(Config : DocumentConfig) -> struct

    val config-data = Config.config

    val page-width = 210mm
    val page-height = 297mm
    val top-space = 25mm
    val bottom-space = 25mm
    val left-space = 25mm
    val right-space = 25mm
    val text-width = page-width -' left-space -' right-space

    val font-data = ClsorFont.default

    val make-ctx width =
      get-initial-context width (command \Math.math)
        |> set-font-size config-data#font-size-normal
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English


    val document bt =
      let ctx = make-ctx text-width in
      let page = UserDefinedPaper(page-width, page-height) in
      % コンテンツを表示させる部分の指定
      let pagecontf pbinfo =
        (|
          text-height = page-height -' (top-space +' bottom-space),
          text-origin = (left-space, top-space),
        |)
      in
      % ヘッダーとフッター
      let pagepartsf pbinfo =
        let page-num = embed-string (arabic pbinfo#page-number) in
        let ctx = set-paragraph-margin 0pt 0pt ctx in
        let header = block-nil in
        let header-origin = (left-space, 0pt) in
        let footer = block-nil in
        let footer-origin = (left-space, page-height -' bottom-space) in
        (|
          header-content = header,
          header-origin = header-origin,
          footer-content = footer,
          footer-origin = footer-origin,
        |)
      in
      let bb = read-block ctx bt in
        page-break page pagecontf pagepartsf bb

    val indent ctx =
      let font-size = get-font-size ctx in
      inline-skip font-size


    val block ctx +p it =
      let ib = read-inline ctx it in
      line-break true true ctx ((indent ctx) ++ ib ++ inline-fil)

    val mutable sec-num-lst <- []

    val mutable sec-num <- 0

    val block ctx +section title inner =
      let () = sec-num <- !sec-num + 1 in
      let old-sec-num-lst = !sec-num-lst in
      let () = sec-num-lst <- !sec-num::!sec-num-lst in
      let old-sec-num = !sec-num in
      let title-ib =
        config-data#section-title-format ctx font-data (List.reverse !sec-num-lst) title
      in
      let title-bb = line-break true false ctx (title-ib ++ inline-fil) in
      let () = sec-num <- 0 in
      let bb = read-block ctx inner in
      let () = sec-num-lst <- old-sec-num-lst in
      let () = sec-num <- old-sec-num in
      title-bb +++ bb


    val inline ctx \non-hyph str =
      let s-lst = string-explode str in
      let f i =
        let char = string-unexplode [i] in
        let ib = char |> embed-string |> read-inline ctx in
        ib
      in
      s-lst
      |> List.map f
      |> List.fold-left (++) inline-nil

    val inline \href url text =
      config-data#link-format {\Annot.href(url)(text);}

    val inline \url url =
      config-data#link-format {\Annot.href(url){\non-hyph(url);}}

  end


end
